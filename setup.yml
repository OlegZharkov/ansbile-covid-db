- hosts: coviddb
  vars_files:
   - vars/main.yml

  post_tasks:
    - user:
        name: centos
        groups: docker
        append: yes
      become: true

  roles:
    - role: geerlingguy.docker
      become: true

  tasks:
    - name: Install unzip
      ansible.builtin.package:
        name: unzip
        state: latest
      become: true

    - name: Create data directory if it does not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ data_path }}"
        - "{{ data_path }}/nginx"
        - "{{ data_path }}/nginx/conf.d"

    - name: Copy nginx conf
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { 'src': app.conf, 'dest': "{{ data_path }}/nginx/conf.d" }
        - { 'src': nginx.conf, 'dest': "{{ data_path }}/nginx" }

    - name: Copy init-letsencrypt
      ansible.builtin.template:
        src: init-letsencrypt.sh.j2
        dest: "{{ service_path }}/init-letsencrypt.sh"
        mode: '0755'
        
    - name: get table data
      ansible.builtin.get_url:
       url: ftp://xfer13.crg.eu/gx-observable.zip
       dest: "{{ data_path }}"

    - name: unarchive table data
      ansible.builtin.unarchive:
        src:  "{{ data_path }}/gx-observable.zip"
        dest: "{{ data_path }}"
        remote_src: True

    - name: copy init.sql
      ansible.builtin.copy:
       src: init.sql
       dest: "{{ data_path }}/init.sql"

    - name: Make sure destination dir exists
      ansible.builtin.file:
        path: "{{ service_path }}"
        state: directory
        
    - name: copy docker-compose.yml
      ansible.builtin.copy:
       src: docker-compose.yml
       dest: "{{ service_path }}"

    - name: copy service file
      ansible.builtin.template:
       src: coviddb.service.j2
       dest: "/etc/systemd/system/coviddb.service"
      become: true
       
    - name: enable docker-compose service
      ansible.builtin.systemd:
       name: coviddb.service
       enabled: yes
       state: restarted
       daemon_reload: yes
       masked: no
      become: true
